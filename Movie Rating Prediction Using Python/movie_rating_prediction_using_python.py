# -*- coding: utf-8 -*-
"""Movie Rating Prediction using Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BU5gvju9HL_-eMQtjEoBMy7usL4xjvcK
"""

#Installing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Loading the dataset
dataframe=pd.read_csv("IMDbMoviesIndia.csv", encoding='latin-1') #reading the csv file
dataframe.head()

dataframe.info()

dataframe.describe()
#dataframe.describe() generates descriptive statistics of the DataFrame. It summarizes central tendency, dispersion and shape of the datasetâ€™s distribution, excluding NaN values.

dataframe.isnull().sum()

dataframe.dropna(subset=["Rating",'Actor 1','Actor 2','Actor 3','Director','Genre'], inplace=True)
#dataframe.dropna(subset=[...], inplace=True):
#dropna is used to remove rows with missing values.
#subset=[...] specifies the columns to check for missing values: 'Rating', 'Actor 1', 'Actor 2', 'Actor 3', 'Director', and 'Genre'.
#inplace=True modifies the DataFrame directly without creating a copy.

dataframe.isnull().sum()
#dataframe.isnull().sum() counts the number of missing (null) values in each column of the DataFrame.

dataframe.head()

dataframe['Votes'] = dataframe['Votes'].str.replace(',','').astype(int)
#dataframe['votes'].str.replace(',', ''): Removes commas from the 'votes' column
#.astype(int): Converts the 'votes' column to integer data type after removing the commas, allowing for numerical operations.

dataframe['Year']=dataframe['Year'].str.strip('()').astype(int)
#dataframe['year'].str.strip('()'): Removes the opening and closing parentheses from the 'year' column.
#astype(int): Converts the 'year' column to integer data type.

dataframe['Duration']=dataframe['Duration'].str.strip('min')
#dataframe['Duration'].str.strip('min'): Removes the 'min' suffix from the 'Duration' column.

dataframe['Duration'].fillna(dataframe['Duration'].median(),inplace=True)
#dataframe['duration'].fillna(dataframe['Duration'].median(), inplace=True): Fills missing values in the 'duration' column with the median value of the 'Duration' column.
#inplace=True modifies the DataFrame directly without creating a copy.

dataframe.isnull().sum()

dataframe.info()

dataframe.head()

GM = dataframe.loc[dataframe['Rating'].sort_values(ascending=False)[:10].index]
GM

#This code selects the top 10 highest rated movies in your DataFrame.
#dataframe['Rating'].sort_values(ascending=False): Sorts the DataFrame by the 'Rating' column in descending order (highest rating first).
#[:10]: Selects the first 10 rows (top 10 highest rated movies).
#.index: Extracts the row indices of these top 10 movies.
#dataframe.loc[...]: Uses the extracted indices to select the corresponding rows from the original DataFrame and assigns them to the variable GM.

sns.histplot(data=GM,x="Year", hue="Rating", multiple="stack")
#sns.histplot(data=GM, x="Year", hue="Rating", multiple="stack"):
#Creates a histogram using Seaborn's histplot function.
#data=GM specifies the DataFrame to use (the top 10 movies).
#x="Year" sets the x-axis to represent the release year.
#hue="Rating" colors the bars based on the movie's rating.
#multiple="stack" stacks bars with the same year on top of each other for better comparison.


plt.title('Top 10 Highest Rated Movies',fontsize=20)
plt.xlabel('Year',fontsize=15)
plt.ylabel('Rating',fontsize=15)
#plt.title(...), plt.xlabel(...), plt.ylabel(...):
#Sets the title and labels for the plot, enhancing readability.




plt.tight_layout()
#plt.tight_layout(): Adjusts the plot layout to prevent overlapping elements.




plt.show()
#Display the histogram output.

gen_count = dataframe['Genre'].value_counts().reset_index()
gen_count.columns = ['Genre', 'Count']
top_genres = gen_count.head(5)
top_genres

plt.figure(figsize=(4, 4))
#plt.figure(figsize=(4, 4)): Sets the size of the figure to create a square pie chart.


plt.pie(top_genres['Count'], labels=top_genres['Genre'], autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
#plt.pie(...): Creates the pie chart using Matplotlib's pie function.
#top_genres['Count'] provides the data for the size of each pie slice (count of each genre).
#labels=top_genres['Genre'] sets the labels for each slice.
#autopct='%1.1f%%' formats the percentage labels displayed on each slice.
#startangle=140 sets the starting angle for the first slice.
#colors=sns.color_palette('pastel') uses a pastel color palette from Seaborn.



plt.title('Top 6 Genres', fontsize=16)
#plt.title(...): Sets the title for the pie chart.


plt.axis('equal')
#plt.axis('equal'): Ensures that the pie chart is drawn as a circle.


plt.show()
#plt.show(): Displays the generated pie chart.

director_avg_rating_count = dataframe.groupby('Director')['Rating'].mean().reset_index()
#Groups the DataFrame by the 'Director' column.
#Calculates the mean rating for each director.
#Resets the index to create a new DataFrame with 'Director' and 'Rating' columns.


director_avg_rating_count = director_avg_rating_count.sort_values(by='Rating',ascending=False)
#Sorts the DataFrame director_avg_rating_count in descending order based on the 'Rating' column.


top_directors = director_avg_rating_count.head(6)
#Selects the top 6 rows (directors with the highest average ratings) and assigns them to top_directors.


top_directors
#display the output.

plt.figure(figsize=(12, 6))
#Sets the size

sns.barplot(x='Director', y='Rating', data=top_directors, palette='viridis')
#Creates a bar plot using Seaborn

plt.title('Top Directors by Average Rating', fontsize=16)
#Sets the title

plt.xlabel('Director', fontsize=14)
#Sets the label for the x-axis

plt.ylabel('Average Rating', fontsize=14)
#Sets the label for the y-axis

plt.show()
#Displays the generated bar plot.

plt.figure(figsize=(12, 6))
#Sets the size

sns.lineplot(data=dataframe, x='Rating', y='Votes')
#Creates a bar plot using Seaborn

plt.title('Votes vs Rating', fontsize=16)
#Sets the title

plt.xlabel('Rating', fontsize=14)
#Sets the label for the x-axis

plt.ylabel('Votes', fontsize=14)
#Sets the label for the y-axis

plt.show()
#Displays the generated bar plot.

actor_count = dataframe['Actor 1'].value_counts().reset_index()
#Counts the occurrences of each unique actor in the 'Actor 1' column.


actor_count.columns = ['Actor', 'MovieCount']
#Assigns the list ['Actor', 'MovieCount'] as the new column names for the DataFrame.
#The first column, previously named 'index', is now renamed to 'Actor'.
#The second column, which contained the counts, is now renamed to 'MovieCount'.
top_actors = actor_count.head(6)

top_actors
#display the data.

plt.figure(figsize=(12, 6))
#Sets the size

sns.barplot(data=top_actors, x='MovieCount', y='Actor', palette='viridis')
#Creates a bar plot using Seaborn

plt.title('Top Actors by Number of Movies', fontsize=16)
#Sets the title

plt.xlabel('Number of Movies', fontsize=14)
#Sets the label for the x-axis

plt.ylabel('Actor', fontsize=14)
#Sets the label for the y-axis

plt.show()
#Displays the generated bar plot.

yearly_movie_count = dataframe['Year'].value_counts().reset_index()
#Counts the occurrences of each unique year in the 'year' column.

yearly_movie_count.columns = ['Year', 'MovieCount']
#Assigns the list ['Year', 'MovieCount'] as the new column names for the DataFrame.
#The first column, previously named 'index', is now renamed to 'Year'.
#The second column, which contained the counts, is now renamed to 'MovieCount'.

yearly_movie_count = yearly_movie_count.sort_values(by='Year')
#Sorts the DataFrame yearly_movie_count in ascending order based on the 'Year' column.

yearly_movie_count

plt.figure(figsize=(12, 6))
#Sets the size

sns.lineplot(data=yearly_movie_count, x='Year', y='MovieCount')
#Creates a line plot using Sea

plt.title('Number of Movies per Year', fontsize=16)
#Sets the title

plt.xlabel('Year', fontsize=14)
#Sets the label for the x-axis

plt.ylabel('Number of Movies released', fontsize=14)
#Sets the label for the y-axis

plt.show()
#Displays the generated line plot.

filtered_dataframe = dataframe[(dataframe['Rating']>8) & (dataframe['Votes']>10000)]
filtered_dataframe

plt.figure(figsize=(12, 6))
#Sets the size

ax= sns.barplot(data=filtered_dataframe, x='Director', y='Votes', hue='Rating', dodge=False, width=0.5, palette='muted')
#Creates a bar plot using Seaborn

ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')


ax.legend(loc='upper right')
ax.set_xlabel('Movie Name')
ax.set_ylabel('Votes')
ax.set_title('Movies with rating greater than 8 and votes greater than 10000')


plt.show()

dataframe['Duration'] = dataframe['Duration'].astype(int)
dataframe['Year'] = dataframe['Year'].astype(int)


plt.figure(figsize=(12, 6))
#Sets the size

sns.lineplot(data=dataframe, x='Year', y='Duration', errorbar=None)
#Creates a line plot using Seaborn

plt.xlabel('Year')
#Sets the label for the x-axis

plt.ylabel('Duration (minutes)')
#Sets the label for the y-axis

plt.title('Duration of movies by year')
#Sets the title

plt.xticks(np.arange (1917,2023,5))

plt.show()
#Displays the generated line plot.

dataframe['Genre']=dataframe['Genre'].str.split(',')
genre_dataframe=dataframe.explode('Genre')
genre_dataframe

plt.figure(figsize=(12, 6))
#Sets the size

sns.countplot(data=genre_dataframe, x='Genre',order=genre_dataframe['Genre'].value_counts().index, palette='viridis')
#Creates a count plot using Sea


plt.title('Number of Movies for each Genre', fontsize=16)
#Sets the title

plt.xlabel('Number of Movies', fontsize=12)
#Sets the label for the x-axis

plt.ylabel('Genre', fontsize=12)
#Sets the label for the y-axis


plt.xticks(rotation=90)
#Rotates the x-axis labels for better readability


plt.show()
#Displays the generated count plot.

avg_ratingbygenre = genre_dataframe.groupby('Genre')['Rating'].mean().reset_index()
avg_ratingbygenre = avg_ratingbygenre.sort_values(by='Rating', ascending=False)
avg_ratingbygenre

plt.figure(figsize=(12, 6))
#Sets the size

sns.barplot(data=avg_ratingbygenre, x='Genre', y='Rating', palette='viridis')
#Creates a bar plot using Sea

plt.title('Average Rating of movies in each Genre')
#Sets the title

plt.xlabel('Genre')
#Sets the label for the x-axis

plt.ylabel('Average Rating')
#Sets the label for the y-axis

plt.xticks(rotation=90)
#Rotates the x-axis labels for better readability

plt.show()
#Displays the generated bar plot.

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()


trans_dataframe = dataframe.drop(['Name'],axis=1)

trans_dataframe['Director'] = labelencoder.fit_transform(dataframe['Director'])


trans_dataframe['Actor 1'] = labelencoder.fit_transform(dataframe['Actor 1'])
trans_dataframe['Actor 2'] = labelencoder.fit_transform(dataframe['Actor 2'])
trans_dataframe['Actor 3'] = labelencoder.fit_transform(dataframe['Actor 3'])

trans_dataframe['Genre'] = labelencoder.fit_transform(dataframe['Genre'].apply(lambda x: ', '.join(x)))

trans_dataframe.head()

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

sc_data = scaler.fit_transform(trans_dataframe)
sc_dataframe = pd.DataFrame(sc_data, columns=trans_dataframe.columns)
sc_dataframe.head()

corr_dataframe= trans_dataframe.corr(numeric_only=True)
corr_dataframe['Rating'].sort_values(ascending=False)

sns.heatmap(corr_dataframe, annot=False, cmap='coolwarm')
#

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error, r2_score

X = trans_dataframe.drop('Rating', axis=1)
Y = trans_dataframe['Rating']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)
model = LinearRegression()
model.fit(X_train, Y_train)

X_test = np.array(X_test)
Y_pred = model.predict(X_test)
Y_pred

print('R2 Score: ', r2_score(Y_test, Y_pred))
print('Mean Squared Error: ', mean_squared_error(Y_test, Y_pred))
print('Mean Absolute Error: ', mean_absolute_error(Y_test, Y_pred))